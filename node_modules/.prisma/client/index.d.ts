
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  email: string
  password: string
  avatar_url: string
}

/**
 * Model Pet
 * 
 */
export type Pet = {
  id: string
  name: string
  bread: string
  species: string
  available_for_adoption: boolean
  avatar_url: string
  guardian_id: string
}

/**
 * Model Adoption
 * 
 */
export type Adoption = {
  id: string
  adopter_id: string
  pet_id: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.pet`: Exposes CRUD operations for the **Pet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pet.findMany()
    * ```
    */
  get pet(): Prisma.PetDelegate<GlobalReject>;

  /**
   * `prisma.adoption`: Exposes CRUD operations for the **Adoption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adoptions
    * const adoptions = await prisma.adoption.findMany()
    * ```
    */
  get adoption(): Prisma.AdoptionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Pet: 'Pet',
    Adoption: 'Adoption'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    adoption_record: number
    my_pets: number
  }

  export type UserCountOutputTypeSelect = {
    adoption_record?: boolean
    my_pets?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type PetCountOutputType
   */


  export type PetCountOutputType = {
    adoption_record: number
  }

  export type PetCountOutputTypeSelect = {
    adoption_record?: boolean
  }

  export type PetCountOutputTypeGetPayload<S extends boolean | null | undefined | PetCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PetCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PetCountOutputTypeArgs)
    ? PetCountOutputType 
    : S extends { select: any } & (PetCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PetCountOutputType ? PetCountOutputType[P] : never
  } 
      : PetCountOutputType




  // Custom InputTypes

  /**
   * PetCountOutputType without action
   */
  export type PetCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PetCountOutputType
     */
    select?: PetCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    avatar_url: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    avatar_url: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    avatar_url: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar_url?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar_url?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar_url?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    avatar_url: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar_url?: boolean
    adoption_record?: boolean | User$adoption_recordArgs
    my_pets?: boolean | User$my_petsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    adoption_record?: boolean | User$adoption_recordArgs
    my_pets?: boolean | User$my_petsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'adoption_record' ? Array < AdoptionGetPayload<S['include'][P]>>  :
        P extends 'my_pets' ? Array < PetGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'adoption_record' ? Array < AdoptionGetPayload<S['select'][P]>>  :
        P extends 'my_pets' ? Array < PetGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    adoption_record<T extends User$adoption_recordArgs= {}>(args?: Subset<T, User$adoption_recordArgs>): Prisma.PrismaPromise<Array<AdoptionGetPayload<T>>| Null>;

    my_pets<T extends User$my_petsArgs= {}>(args?: Subset<T, User$my_petsArgs>): Prisma.PrismaPromise<Array<PetGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.adoption_record
   */
  export type User$adoption_recordArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    where?: AdoptionWhereInput
    orderBy?: Enumerable<AdoptionOrderByWithRelationInput>
    cursor?: AdoptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AdoptionScalarFieldEnum>
  }


  /**
   * User.my_pets
   */
  export type User$my_petsArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    where?: PetWhereInput
    orderBy?: Enumerable<PetOrderByWithRelationInput>
    cursor?: PetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PetScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Pet
   */


  export type AggregatePet = {
    _count: PetCountAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  export type PetMinAggregateOutputType = {
    id: string | null
    name: string | null
    bread: string | null
    species: string | null
    available_for_adoption: boolean | null
    avatar_url: string | null
    guardian_id: string | null
  }

  export type PetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    bread: string | null
    species: string | null
    available_for_adoption: boolean | null
    avatar_url: string | null
    guardian_id: string | null
  }

  export type PetCountAggregateOutputType = {
    id: number
    name: number
    bread: number
    species: number
    available_for_adoption: number
    avatar_url: number
    guardian_id: number
    _all: number
  }


  export type PetMinAggregateInputType = {
    id?: true
    name?: true
    bread?: true
    species?: true
    available_for_adoption?: true
    avatar_url?: true
    guardian_id?: true
  }

  export type PetMaxAggregateInputType = {
    id?: true
    name?: true
    bread?: true
    species?: true
    available_for_adoption?: true
    avatar_url?: true
    guardian_id?: true
  }

  export type PetCountAggregateInputType = {
    id?: true
    name?: true
    bread?: true
    species?: true
    available_for_adoption?: true
    avatar_url?: true
    guardian_id?: true
    _all?: true
  }

  export type PetAggregateArgs = {
    /**
     * Filter which Pet to aggregate.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: Enumerable<PetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pets
    **/
    _count?: true | PetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetMaxAggregateInputType
  }

  export type GetPetAggregateType<T extends PetAggregateArgs> = {
        [P in keyof T & keyof AggregatePet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePet[P]>
      : GetScalarType<T[P], AggregatePet[P]>
  }




  export type PetGroupByArgs = {
    where?: PetWhereInput
    orderBy?: Enumerable<PetOrderByWithAggregationInput>
    by: PetScalarFieldEnum[]
    having?: PetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetCountAggregateInputType | true
    _min?: PetMinAggregateInputType
    _max?: PetMaxAggregateInputType
  }


  export type PetGroupByOutputType = {
    id: string
    name: string
    bread: string
    species: string
    available_for_adoption: boolean
    avatar_url: string
    guardian_id: string
    _count: PetCountAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  type GetPetGroupByPayload<T extends PetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetGroupByOutputType[P]>
            : GetScalarType<T[P], PetGroupByOutputType[P]>
        }
      >
    >


  export type PetSelect = {
    id?: boolean
    name?: boolean
    bread?: boolean
    species?: boolean
    available_for_adoption?: boolean
    avatar_url?: boolean
    guardian_id?: boolean
    adoption_record?: boolean | Pet$adoption_recordArgs
    guardian?: boolean | UserArgs
    _count?: boolean | PetCountOutputTypeArgs
  }


  export type PetInclude = {
    adoption_record?: boolean | Pet$adoption_recordArgs
    guardian?: boolean | UserArgs
    _count?: boolean | PetCountOutputTypeArgs
  }

  export type PetGetPayload<S extends boolean | null | undefined | PetArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pet :
    S extends undefined ? never :
    S extends { include: any } & (PetArgs | PetFindManyArgs)
    ? Pet  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'adoption_record' ? Array < AdoptionGetPayload<S['include'][P]>>  :
        P extends 'guardian' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? PetCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PetArgs | PetFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'adoption_record' ? Array < AdoptionGetPayload<S['select'][P]>>  :
        P extends 'guardian' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? PetCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Pet ? Pet[P] : never
  } 
      : Pet


  type PetCountArgs = 
    Omit<PetFindManyArgs, 'select' | 'include'> & {
      select?: PetCountAggregateInputType | true
    }

  export interface PetDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pet that matches the filter.
     * @param {PetFindUniqueArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pet'> extends True ? Prisma__PetClient<PetGetPayload<T>> : Prisma__PetClient<PetGetPayload<T> | null, null>

    /**
     * Find one Pet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PetFindUniqueOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PetFindUniqueOrThrowArgs>
    ): Prisma__PetClient<PetGetPayload<T>>

    /**
     * Find the first Pet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pet'> extends True ? Prisma__PetClient<PetGetPayload<T>> : Prisma__PetClient<PetGetPayload<T> | null, null>

    /**
     * Find the first Pet that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PetFindFirstOrThrowArgs>
    ): Prisma__PetClient<PetGetPayload<T>>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pet.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petWithIdOnly = await prisma.pet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetFindManyArgs>(
      args?: SelectSubset<T, PetFindManyArgs>
    ): Prisma.PrismaPromise<Array<PetGetPayload<T>>>

    /**
     * Create a Pet.
     * @param {PetCreateArgs} args - Arguments to create a Pet.
     * @example
     * // Create one Pet
     * const Pet = await prisma.pet.create({
     *   data: {
     *     // ... data to create a Pet
     *   }
     * })
     * 
    **/
    create<T extends PetCreateArgs>(
      args: SelectSubset<T, PetCreateArgs>
    ): Prisma__PetClient<PetGetPayload<T>>

    /**
     * Delete a Pet.
     * @param {PetDeleteArgs} args - Arguments to delete one Pet.
     * @example
     * // Delete one Pet
     * const Pet = await prisma.pet.delete({
     *   where: {
     *     // ... filter to delete one Pet
     *   }
     * })
     * 
    **/
    delete<T extends PetDeleteArgs>(
      args: SelectSubset<T, PetDeleteArgs>
    ): Prisma__PetClient<PetGetPayload<T>>

    /**
     * Update one Pet.
     * @param {PetUpdateArgs} args - Arguments to update one Pet.
     * @example
     * // Update one Pet
     * const pet = await prisma.pet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetUpdateArgs>(
      args: SelectSubset<T, PetUpdateArgs>
    ): Prisma__PetClient<PetGetPayload<T>>

    /**
     * Delete zero or more Pets.
     * @param {PetDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetDeleteManyArgs>(
      args?: SelectSubset<T, PetDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pet = await prisma.pet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetUpdateManyArgs>(
      args: SelectSubset<T, PetUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pet.
     * @param {PetUpsertArgs} args - Arguments to update or create a Pet.
     * @example
     * // Update or create a Pet
     * const pet = await prisma.pet.upsert({
     *   create: {
     *     // ... data to create a Pet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pet we want to update
     *   }
     * })
    **/
    upsert<T extends PetUpsertArgs>(
      args: SelectSubset<T, PetUpsertArgs>
    ): Prisma__PetClient<PetGetPayload<T>>

    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pet.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends PetCountArgs>(
      args?: Subset<T, PetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetAggregateArgs>(args: Subset<T, PetAggregateArgs>): Prisma.PrismaPromise<GetPetAggregateType<T>>

    /**
     * Group by Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetGroupByArgs['orderBy'] }
        : { orderBy?: PetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PetClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    adoption_record<T extends Pet$adoption_recordArgs= {}>(args?: Subset<T, Pet$adoption_recordArgs>): Prisma.PrismaPromise<Array<AdoptionGetPayload<T>>| Null>;

    guardian<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pet base type for findUnique actions
   */
  export type PetFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet findUnique
   */
  export interface PetFindUniqueArgs extends PetFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pet findUniqueOrThrow
   */
  export type PetFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet base type for findFirst actions
   */
  export type PetFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: Enumerable<PetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: Enumerable<PetScalarFieldEnum>
  }

  /**
   * Pet findFirst
   */
  export interface PetFindFirstArgs extends PetFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pet findFirstOrThrow
   */
  export type PetFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: Enumerable<PetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: Enumerable<PetScalarFieldEnum>
  }


  /**
   * Pet findMany
   */
  export type PetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * Filter, which Pets to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: Enumerable<PetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    distinct?: Enumerable<PetScalarFieldEnum>
  }


  /**
   * Pet create
   */
  export type PetCreateArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * The data needed to create a Pet.
     */
    data: XOR<PetCreateInput, PetUncheckedCreateInput>
  }


  /**
   * Pet update
   */
  export type PetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * The data needed to update a Pet.
     */
    data: XOR<PetUpdateInput, PetUncheckedUpdateInput>
    /**
     * Choose, which Pet to update.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet updateMany
   */
  export type PetUpdateManyArgs = {
    /**
     * The data used to update Pets.
     */
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     */
    where?: PetWhereInput
  }


  /**
   * Pet upsert
   */
  export type PetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * The filter to search for the Pet to update in case it exists.
     */
    where: PetWhereUniqueInput
    /**
     * In case the Pet found by the `where` argument doesn't exist, create a new Pet with this data.
     */
    create: XOR<PetCreateInput, PetUncheckedCreateInput>
    /**
     * In case the Pet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetUpdateInput, PetUncheckedUpdateInput>
  }


  /**
   * Pet delete
   */
  export type PetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
    /**
     * Filter which Pet to delete.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet deleteMany
   */
  export type PetDeleteManyArgs = {
    /**
     * Filter which Pets to delete
     */
    where?: PetWhereInput
  }


  /**
   * Pet.adoption_record
   */
  export type Pet$adoption_recordArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    where?: AdoptionWhereInput
    orderBy?: Enumerable<AdoptionOrderByWithRelationInput>
    cursor?: AdoptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AdoptionScalarFieldEnum>
  }


  /**
   * Pet without action
   */
  export type PetArgs = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude | null
  }



  /**
   * Model Adoption
   */


  export type AggregateAdoption = {
    _count: AdoptionCountAggregateOutputType | null
    _min: AdoptionMinAggregateOutputType | null
    _max: AdoptionMaxAggregateOutputType | null
  }

  export type AdoptionMinAggregateOutputType = {
    id: string | null
    adopter_id: string | null
    pet_id: string | null
  }

  export type AdoptionMaxAggregateOutputType = {
    id: string | null
    adopter_id: string | null
    pet_id: string | null
  }

  export type AdoptionCountAggregateOutputType = {
    id: number
    adopter_id: number
    pet_id: number
    _all: number
  }


  export type AdoptionMinAggregateInputType = {
    id?: true
    adopter_id?: true
    pet_id?: true
  }

  export type AdoptionMaxAggregateInputType = {
    id?: true
    adopter_id?: true
    pet_id?: true
  }

  export type AdoptionCountAggregateInputType = {
    id?: true
    adopter_id?: true
    pet_id?: true
    _all?: true
  }

  export type AdoptionAggregateArgs = {
    /**
     * Filter which Adoption to aggregate.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: Enumerable<AdoptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Adoptions
    **/
    _count?: true | AdoptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdoptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdoptionMaxAggregateInputType
  }

  export type GetAdoptionAggregateType<T extends AdoptionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdoption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdoption[P]>
      : GetScalarType<T[P], AggregateAdoption[P]>
  }




  export type AdoptionGroupByArgs = {
    where?: AdoptionWhereInput
    orderBy?: Enumerable<AdoptionOrderByWithAggregationInput>
    by: AdoptionScalarFieldEnum[]
    having?: AdoptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdoptionCountAggregateInputType | true
    _min?: AdoptionMinAggregateInputType
    _max?: AdoptionMaxAggregateInputType
  }


  export type AdoptionGroupByOutputType = {
    id: string
    adopter_id: string
    pet_id: string
    _count: AdoptionCountAggregateOutputType | null
    _min: AdoptionMinAggregateOutputType | null
    _max: AdoptionMaxAggregateOutputType | null
  }

  type GetAdoptionGroupByPayload<T extends AdoptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdoptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdoptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdoptionGroupByOutputType[P]>
            : GetScalarType<T[P], AdoptionGroupByOutputType[P]>
        }
      >
    >


  export type AdoptionSelect = {
    id?: boolean
    adopter_id?: boolean
    pet_id?: boolean
    adopter?: boolean | UserArgs
    pet?: boolean | PetArgs
  }


  export type AdoptionInclude = {
    adopter?: boolean | UserArgs
    pet?: boolean | PetArgs
  }

  export type AdoptionGetPayload<S extends boolean | null | undefined | AdoptionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Adoption :
    S extends undefined ? never :
    S extends { include: any } & (AdoptionArgs | AdoptionFindManyArgs)
    ? Adoption  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'adopter' ? UserGetPayload<S['include'][P]> :
        P extends 'pet' ? PetGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AdoptionArgs | AdoptionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'adopter' ? UserGetPayload<S['select'][P]> :
        P extends 'pet' ? PetGetPayload<S['select'][P]> :  P extends keyof Adoption ? Adoption[P] : never
  } 
      : Adoption


  type AdoptionCountArgs = 
    Omit<AdoptionFindManyArgs, 'select' | 'include'> & {
      select?: AdoptionCountAggregateInputType | true
    }

  export interface AdoptionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Adoption that matches the filter.
     * @param {AdoptionFindUniqueArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdoptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdoptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Adoption'> extends True ? Prisma__AdoptionClient<AdoptionGetPayload<T>> : Prisma__AdoptionClient<AdoptionGetPayload<T> | null, null>

    /**
     * Find one Adoption that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdoptionFindUniqueOrThrowArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdoptionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdoptionFindUniqueOrThrowArgs>
    ): Prisma__AdoptionClient<AdoptionGetPayload<T>>

    /**
     * Find the first Adoption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionFindFirstArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdoptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdoptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Adoption'> extends True ? Prisma__AdoptionClient<AdoptionGetPayload<T>> : Prisma__AdoptionClient<AdoptionGetPayload<T> | null, null>

    /**
     * Find the first Adoption that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionFindFirstOrThrowArgs} args - Arguments to find a Adoption
     * @example
     * // Get one Adoption
     * const adoption = await prisma.adoption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdoptionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdoptionFindFirstOrThrowArgs>
    ): Prisma__AdoptionClient<AdoptionGetPayload<T>>

    /**
     * Find zero or more Adoptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adoptions
     * const adoptions = await prisma.adoption.findMany()
     * 
     * // Get first 10 Adoptions
     * const adoptions = await prisma.adoption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adoptionWithIdOnly = await prisma.adoption.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdoptionFindManyArgs>(
      args?: SelectSubset<T, AdoptionFindManyArgs>
    ): Prisma.PrismaPromise<Array<AdoptionGetPayload<T>>>

    /**
     * Create a Adoption.
     * @param {AdoptionCreateArgs} args - Arguments to create a Adoption.
     * @example
     * // Create one Adoption
     * const Adoption = await prisma.adoption.create({
     *   data: {
     *     // ... data to create a Adoption
     *   }
     * })
     * 
    **/
    create<T extends AdoptionCreateArgs>(
      args: SelectSubset<T, AdoptionCreateArgs>
    ): Prisma__AdoptionClient<AdoptionGetPayload<T>>

    /**
     * Delete a Adoption.
     * @param {AdoptionDeleteArgs} args - Arguments to delete one Adoption.
     * @example
     * // Delete one Adoption
     * const Adoption = await prisma.adoption.delete({
     *   where: {
     *     // ... filter to delete one Adoption
     *   }
     * })
     * 
    **/
    delete<T extends AdoptionDeleteArgs>(
      args: SelectSubset<T, AdoptionDeleteArgs>
    ): Prisma__AdoptionClient<AdoptionGetPayload<T>>

    /**
     * Update one Adoption.
     * @param {AdoptionUpdateArgs} args - Arguments to update one Adoption.
     * @example
     * // Update one Adoption
     * const adoption = await prisma.adoption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdoptionUpdateArgs>(
      args: SelectSubset<T, AdoptionUpdateArgs>
    ): Prisma__AdoptionClient<AdoptionGetPayload<T>>

    /**
     * Delete zero or more Adoptions.
     * @param {AdoptionDeleteManyArgs} args - Arguments to filter Adoptions to delete.
     * @example
     * // Delete a few Adoptions
     * const { count } = await prisma.adoption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdoptionDeleteManyArgs>(
      args?: SelectSubset<T, AdoptionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adoptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adoptions
     * const adoption = await prisma.adoption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdoptionUpdateManyArgs>(
      args: SelectSubset<T, AdoptionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adoption.
     * @param {AdoptionUpsertArgs} args - Arguments to update or create a Adoption.
     * @example
     * // Update or create a Adoption
     * const adoption = await prisma.adoption.upsert({
     *   create: {
     *     // ... data to create a Adoption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adoption we want to update
     *   }
     * })
    **/
    upsert<T extends AdoptionUpsertArgs>(
      args: SelectSubset<T, AdoptionUpsertArgs>
    ): Prisma__AdoptionClient<AdoptionGetPayload<T>>

    /**
     * Count the number of Adoptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionCountArgs} args - Arguments to filter Adoptions to count.
     * @example
     * // Count the number of Adoptions
     * const count = await prisma.adoption.count({
     *   where: {
     *     // ... the filter for the Adoptions we want to count
     *   }
     * })
    **/
    count<T extends AdoptionCountArgs>(
      args?: Subset<T, AdoptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdoptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adoption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdoptionAggregateArgs>(args: Subset<T, AdoptionAggregateArgs>): Prisma.PrismaPromise<GetAdoptionAggregateType<T>>

    /**
     * Group by Adoption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdoptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdoptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdoptionGroupByArgs['orderBy'] }
        : { orderBy?: AdoptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdoptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdoptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Adoption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdoptionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    adopter<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    pet<T extends PetArgs= {}>(args?: Subset<T, PetArgs>): Prisma__PetClient<PetGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Adoption base type for findUnique actions
   */
  export type AdoptionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * Filter, which Adoption to fetch.
     */
    where: AdoptionWhereUniqueInput
  }

  /**
   * Adoption findUnique
   */
  export interface AdoptionFindUniqueArgs extends AdoptionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Adoption findUniqueOrThrow
   */
  export type AdoptionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * Filter, which Adoption to fetch.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption base type for findFirst actions
   */
  export type AdoptionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * Filter, which Adoption to fetch.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: Enumerable<AdoptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adoptions.
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adoptions.
     */
    distinct?: Enumerable<AdoptionScalarFieldEnum>
  }

  /**
   * Adoption findFirst
   */
  export interface AdoptionFindFirstArgs extends AdoptionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Adoption findFirstOrThrow
   */
  export type AdoptionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * Filter, which Adoption to fetch.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: Enumerable<AdoptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adoptions.
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adoptions.
     */
    distinct?: Enumerable<AdoptionScalarFieldEnum>
  }


  /**
   * Adoption findMany
   */
  export type AdoptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * Filter, which Adoptions to fetch.
     */
    where?: AdoptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adoptions to fetch.
     */
    orderBy?: Enumerable<AdoptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Adoptions.
     */
    cursor?: AdoptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adoptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adoptions.
     */
    skip?: number
    distinct?: Enumerable<AdoptionScalarFieldEnum>
  }


  /**
   * Adoption create
   */
  export type AdoptionCreateArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * The data needed to create a Adoption.
     */
    data: XOR<AdoptionCreateInput, AdoptionUncheckedCreateInput>
  }


  /**
   * Adoption update
   */
  export type AdoptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * The data needed to update a Adoption.
     */
    data: XOR<AdoptionUpdateInput, AdoptionUncheckedUpdateInput>
    /**
     * Choose, which Adoption to update.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption updateMany
   */
  export type AdoptionUpdateManyArgs = {
    /**
     * The data used to update Adoptions.
     */
    data: XOR<AdoptionUpdateManyMutationInput, AdoptionUncheckedUpdateManyInput>
    /**
     * Filter which Adoptions to update
     */
    where?: AdoptionWhereInput
  }


  /**
   * Adoption upsert
   */
  export type AdoptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * The filter to search for the Adoption to update in case it exists.
     */
    where: AdoptionWhereUniqueInput
    /**
     * In case the Adoption found by the `where` argument doesn't exist, create a new Adoption with this data.
     */
    create: XOR<AdoptionCreateInput, AdoptionUncheckedCreateInput>
    /**
     * In case the Adoption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdoptionUpdateInput, AdoptionUncheckedUpdateInput>
  }


  /**
   * Adoption delete
   */
  export type AdoptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
    /**
     * Filter which Adoption to delete.
     */
    where: AdoptionWhereUniqueInput
  }


  /**
   * Adoption deleteMany
   */
  export type AdoptionDeleteManyArgs = {
    /**
     * Filter which Adoptions to delete
     */
    where?: AdoptionWhereInput
  }


  /**
   * Adoption without action
   */
  export type AdoptionArgs = {
    /**
     * Select specific fields to fetch from the Adoption
     */
    select?: AdoptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdoptionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdoptionScalarFieldEnum: {
    id: 'id',
    adopter_id: 'adopter_id',
    pet_id: 'pet_id'
  };

  export type AdoptionScalarFieldEnum = (typeof AdoptionScalarFieldEnum)[keyof typeof AdoptionScalarFieldEnum]


  export const PetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    bread: 'bread',
    species: 'species',
    available_for_adoption: 'available_for_adoption',
    avatar_url: 'avatar_url',
    guardian_id: 'guardian_id'
  };

  export type PetScalarFieldEnum = (typeof PetScalarFieldEnum)[keyof typeof PetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    avatar_url: 'avatar_url'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    avatar_url?: StringFilter | string
    adoption_record?: AdoptionListRelationFilter
    my_pets?: PetListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
    adoption_record?: AdoptionOrderByRelationAggregateInput
    my_pets?: PetOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    avatar_url?: StringWithAggregatesFilter | string
  }

  export type PetWhereInput = {
    AND?: Enumerable<PetWhereInput>
    OR?: Enumerable<PetWhereInput>
    NOT?: Enumerable<PetWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    bread?: StringFilter | string
    species?: StringFilter | string
    available_for_adoption?: BoolFilter | boolean
    avatar_url?: StringFilter | string
    guardian_id?: StringFilter | string
    adoption_record?: AdoptionListRelationFilter
    guardian?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    bread?: SortOrder
    species?: SortOrder
    available_for_adoption?: SortOrder
    avatar_url?: SortOrder
    guardian_id?: SortOrder
    adoption_record?: AdoptionOrderByRelationAggregateInput
    guardian?: UserOrderByWithRelationInput
  }

  export type PetWhereUniqueInput = {
    id?: string
  }

  export type PetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    bread?: SortOrder
    species?: SortOrder
    available_for_adoption?: SortOrder
    avatar_url?: SortOrder
    guardian_id?: SortOrder
    _count?: PetCountOrderByAggregateInput
    _max?: PetMaxOrderByAggregateInput
    _min?: PetMinOrderByAggregateInput
  }

  export type PetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PetScalarWhereWithAggregatesInput>
    OR?: Enumerable<PetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PetScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    bread?: StringWithAggregatesFilter | string
    species?: StringWithAggregatesFilter | string
    available_for_adoption?: BoolWithAggregatesFilter | boolean
    avatar_url?: StringWithAggregatesFilter | string
    guardian_id?: StringWithAggregatesFilter | string
  }

  export type AdoptionWhereInput = {
    AND?: Enumerable<AdoptionWhereInput>
    OR?: Enumerable<AdoptionWhereInput>
    NOT?: Enumerable<AdoptionWhereInput>
    id?: StringFilter | string
    adopter_id?: StringFilter | string
    pet_id?: StringFilter | string
    adopter?: XOR<UserRelationFilter, UserWhereInput>
    pet?: XOR<PetRelationFilter, PetWhereInput>
  }

  export type AdoptionOrderByWithRelationInput = {
    id?: SortOrder
    adopter_id?: SortOrder
    pet_id?: SortOrder
    adopter?: UserOrderByWithRelationInput
    pet?: PetOrderByWithRelationInput
  }

  export type AdoptionWhereUniqueInput = {
    id?: string
  }

  export type AdoptionOrderByWithAggregationInput = {
    id?: SortOrder
    adopter_id?: SortOrder
    pet_id?: SortOrder
    _count?: AdoptionCountOrderByAggregateInput
    _max?: AdoptionMaxOrderByAggregateInput
    _min?: AdoptionMinOrderByAggregateInput
  }

  export type AdoptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdoptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdoptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdoptionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    adopter_id?: StringWithAggregatesFilter | string
    pet_id?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar_url: string
    adoption_record?: AdoptionCreateNestedManyWithoutAdopterInput
    my_pets?: PetCreateNestedManyWithoutGuardianInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar_url: string
    adoption_record?: AdoptionUncheckedCreateNestedManyWithoutAdopterInput
    my_pets?: PetUncheckedCreateNestedManyWithoutGuardianInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUpdateManyWithoutAdopterNestedInput
    my_pets?: PetUpdateManyWithoutGuardianNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUncheckedUpdateManyWithoutAdopterNestedInput
    my_pets?: PetUncheckedUpdateManyWithoutGuardianNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
  }

  export type PetCreateInput = {
    id?: string
    name: string
    bread: string
    species: string
    available_for_adoption?: boolean
    avatar_url: string
    adoption_record?: AdoptionCreateNestedManyWithoutPetInput
    guardian: UserCreateNestedOneWithoutMy_petsInput
  }

  export type PetUncheckedCreateInput = {
    id?: string
    name: string
    bread: string
    species: string
    available_for_adoption?: boolean
    avatar_url: string
    guardian_id: string
    adoption_record?: AdoptionUncheckedCreateNestedManyWithoutPetInput
  }

  export type PetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUpdateManyWithoutPetNestedInput
    guardian?: UserUpdateOneRequiredWithoutMy_petsNestedInput
  }

  export type PetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    guardian_id?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUncheckedUpdateManyWithoutPetNestedInput
  }

  export type PetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
  }

  export type PetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    guardian_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdoptionCreateInput = {
    id?: string
    adopter: UserCreateNestedOneWithoutAdoption_recordInput
    pet: PetCreateNestedOneWithoutAdoption_recordInput
  }

  export type AdoptionUncheckedCreateInput = {
    id?: string
    adopter_id: string
    pet_id: string
  }

  export type AdoptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adopter?: UserUpdateOneRequiredWithoutAdoption_recordNestedInput
    pet?: PetUpdateOneRequiredWithoutAdoption_recordNestedInput
  }

  export type AdoptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adopter_id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdoptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AdoptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adopter_id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type AdoptionListRelationFilter = {
    every?: AdoptionWhereInput
    some?: AdoptionWhereInput
    none?: AdoptionWhereInput
  }

  export type PetListRelationFilter = {
    every?: PetWhereInput
    some?: PetWhereInput
    none?: PetWhereInput
  }

  export type AdoptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bread?: SortOrder
    species?: SortOrder
    available_for_adoption?: SortOrder
    avatar_url?: SortOrder
    guardian_id?: SortOrder
  }

  export type PetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bread?: SortOrder
    species?: SortOrder
    available_for_adoption?: SortOrder
    avatar_url?: SortOrder
    guardian_id?: SortOrder
  }

  export type PetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bread?: SortOrder
    species?: SortOrder
    available_for_adoption?: SortOrder
    avatar_url?: SortOrder
    guardian_id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type PetRelationFilter = {
    is?: PetWhereInput
    isNot?: PetWhereInput
  }

  export type AdoptionCountOrderByAggregateInput = {
    id?: SortOrder
    adopter_id?: SortOrder
    pet_id?: SortOrder
  }

  export type AdoptionMaxOrderByAggregateInput = {
    id?: SortOrder
    adopter_id?: SortOrder
    pet_id?: SortOrder
  }

  export type AdoptionMinOrderByAggregateInput = {
    id?: SortOrder
    adopter_id?: SortOrder
    pet_id?: SortOrder
  }

  export type AdoptionCreateNestedManyWithoutAdopterInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutAdopterInput>, Enumerable<AdoptionUncheckedCreateWithoutAdopterInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutAdopterInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
  }

  export type PetCreateNestedManyWithoutGuardianInput = {
    create?: XOR<Enumerable<PetCreateWithoutGuardianInput>, Enumerable<PetUncheckedCreateWithoutGuardianInput>>
    connectOrCreate?: Enumerable<PetCreateOrConnectWithoutGuardianInput>
    connect?: Enumerable<PetWhereUniqueInput>
  }

  export type AdoptionUncheckedCreateNestedManyWithoutAdopterInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutAdopterInput>, Enumerable<AdoptionUncheckedCreateWithoutAdopterInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutAdopterInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
  }

  export type PetUncheckedCreateNestedManyWithoutGuardianInput = {
    create?: XOR<Enumerable<PetCreateWithoutGuardianInput>, Enumerable<PetUncheckedCreateWithoutGuardianInput>>
    connectOrCreate?: Enumerable<PetCreateOrConnectWithoutGuardianInput>
    connect?: Enumerable<PetWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AdoptionUpdateManyWithoutAdopterNestedInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutAdopterInput>, Enumerable<AdoptionUncheckedCreateWithoutAdopterInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutAdopterInput>
    upsert?: Enumerable<AdoptionUpsertWithWhereUniqueWithoutAdopterInput>
    set?: Enumerable<AdoptionWhereUniqueInput>
    disconnect?: Enumerable<AdoptionWhereUniqueInput>
    delete?: Enumerable<AdoptionWhereUniqueInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
    update?: Enumerable<AdoptionUpdateWithWhereUniqueWithoutAdopterInput>
    updateMany?: Enumerable<AdoptionUpdateManyWithWhereWithoutAdopterInput>
    deleteMany?: Enumerable<AdoptionScalarWhereInput>
  }

  export type PetUpdateManyWithoutGuardianNestedInput = {
    create?: XOR<Enumerable<PetCreateWithoutGuardianInput>, Enumerable<PetUncheckedCreateWithoutGuardianInput>>
    connectOrCreate?: Enumerable<PetCreateOrConnectWithoutGuardianInput>
    upsert?: Enumerable<PetUpsertWithWhereUniqueWithoutGuardianInput>
    set?: Enumerable<PetWhereUniqueInput>
    disconnect?: Enumerable<PetWhereUniqueInput>
    delete?: Enumerable<PetWhereUniqueInput>
    connect?: Enumerable<PetWhereUniqueInput>
    update?: Enumerable<PetUpdateWithWhereUniqueWithoutGuardianInput>
    updateMany?: Enumerable<PetUpdateManyWithWhereWithoutGuardianInput>
    deleteMany?: Enumerable<PetScalarWhereInput>
  }

  export type AdoptionUncheckedUpdateManyWithoutAdopterNestedInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutAdopterInput>, Enumerable<AdoptionUncheckedCreateWithoutAdopterInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutAdopterInput>
    upsert?: Enumerable<AdoptionUpsertWithWhereUniqueWithoutAdopterInput>
    set?: Enumerable<AdoptionWhereUniqueInput>
    disconnect?: Enumerable<AdoptionWhereUniqueInput>
    delete?: Enumerable<AdoptionWhereUniqueInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
    update?: Enumerable<AdoptionUpdateWithWhereUniqueWithoutAdopterInput>
    updateMany?: Enumerable<AdoptionUpdateManyWithWhereWithoutAdopterInput>
    deleteMany?: Enumerable<AdoptionScalarWhereInput>
  }

  export type PetUncheckedUpdateManyWithoutGuardianNestedInput = {
    create?: XOR<Enumerable<PetCreateWithoutGuardianInput>, Enumerable<PetUncheckedCreateWithoutGuardianInput>>
    connectOrCreate?: Enumerable<PetCreateOrConnectWithoutGuardianInput>
    upsert?: Enumerable<PetUpsertWithWhereUniqueWithoutGuardianInput>
    set?: Enumerable<PetWhereUniqueInput>
    disconnect?: Enumerable<PetWhereUniqueInput>
    delete?: Enumerable<PetWhereUniqueInput>
    connect?: Enumerable<PetWhereUniqueInput>
    update?: Enumerable<PetUpdateWithWhereUniqueWithoutGuardianInput>
    updateMany?: Enumerable<PetUpdateManyWithWhereWithoutGuardianInput>
    deleteMany?: Enumerable<PetScalarWhereInput>
  }

  export type AdoptionCreateNestedManyWithoutPetInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutPetInput>, Enumerable<AdoptionUncheckedCreateWithoutPetInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutPetInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutMy_petsInput = {
    create?: XOR<UserCreateWithoutMy_petsInput, UserUncheckedCreateWithoutMy_petsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMy_petsInput
    connect?: UserWhereUniqueInput
  }

  export type AdoptionUncheckedCreateNestedManyWithoutPetInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutPetInput>, Enumerable<AdoptionUncheckedCreateWithoutPetInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutPetInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AdoptionUpdateManyWithoutPetNestedInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutPetInput>, Enumerable<AdoptionUncheckedCreateWithoutPetInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutPetInput>
    upsert?: Enumerable<AdoptionUpsertWithWhereUniqueWithoutPetInput>
    set?: Enumerable<AdoptionWhereUniqueInput>
    disconnect?: Enumerable<AdoptionWhereUniqueInput>
    delete?: Enumerable<AdoptionWhereUniqueInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
    update?: Enumerable<AdoptionUpdateWithWhereUniqueWithoutPetInput>
    updateMany?: Enumerable<AdoptionUpdateManyWithWhereWithoutPetInput>
    deleteMany?: Enumerable<AdoptionScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutMy_petsNestedInput = {
    create?: XOR<UserCreateWithoutMy_petsInput, UserUncheckedCreateWithoutMy_petsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMy_petsInput
    upsert?: UserUpsertWithoutMy_petsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMy_petsInput, UserUncheckedUpdateWithoutMy_petsInput>
  }

  export type AdoptionUncheckedUpdateManyWithoutPetNestedInput = {
    create?: XOR<Enumerable<AdoptionCreateWithoutPetInput>, Enumerable<AdoptionUncheckedCreateWithoutPetInput>>
    connectOrCreate?: Enumerable<AdoptionCreateOrConnectWithoutPetInput>
    upsert?: Enumerable<AdoptionUpsertWithWhereUniqueWithoutPetInput>
    set?: Enumerable<AdoptionWhereUniqueInput>
    disconnect?: Enumerable<AdoptionWhereUniqueInput>
    delete?: Enumerable<AdoptionWhereUniqueInput>
    connect?: Enumerable<AdoptionWhereUniqueInput>
    update?: Enumerable<AdoptionUpdateWithWhereUniqueWithoutPetInput>
    updateMany?: Enumerable<AdoptionUpdateManyWithWhereWithoutPetInput>
    deleteMany?: Enumerable<AdoptionScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAdoption_recordInput = {
    create?: XOR<UserCreateWithoutAdoption_recordInput, UserUncheckedCreateWithoutAdoption_recordInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdoption_recordInput
    connect?: UserWhereUniqueInput
  }

  export type PetCreateNestedOneWithoutAdoption_recordInput = {
    create?: XOR<PetCreateWithoutAdoption_recordInput, PetUncheckedCreateWithoutAdoption_recordInput>
    connectOrCreate?: PetCreateOrConnectWithoutAdoption_recordInput
    connect?: PetWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdoption_recordNestedInput = {
    create?: XOR<UserCreateWithoutAdoption_recordInput, UserUncheckedCreateWithoutAdoption_recordInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdoption_recordInput
    upsert?: UserUpsertWithoutAdoption_recordInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAdoption_recordInput, UserUncheckedUpdateWithoutAdoption_recordInput>
  }

  export type PetUpdateOneRequiredWithoutAdoption_recordNestedInput = {
    create?: XOR<PetCreateWithoutAdoption_recordInput, PetUncheckedCreateWithoutAdoption_recordInput>
    connectOrCreate?: PetCreateOrConnectWithoutAdoption_recordInput
    upsert?: PetUpsertWithoutAdoption_recordInput
    connect?: PetWhereUniqueInput
    update?: XOR<PetUpdateWithoutAdoption_recordInput, PetUncheckedUpdateWithoutAdoption_recordInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type AdoptionCreateWithoutAdopterInput = {
    id?: string
    pet: PetCreateNestedOneWithoutAdoption_recordInput
  }

  export type AdoptionUncheckedCreateWithoutAdopterInput = {
    id?: string
    pet_id: string
  }

  export type AdoptionCreateOrConnectWithoutAdopterInput = {
    where: AdoptionWhereUniqueInput
    create: XOR<AdoptionCreateWithoutAdopterInput, AdoptionUncheckedCreateWithoutAdopterInput>
  }

  export type PetCreateWithoutGuardianInput = {
    id?: string
    name: string
    bread: string
    species: string
    available_for_adoption?: boolean
    avatar_url: string
    adoption_record?: AdoptionCreateNestedManyWithoutPetInput
  }

  export type PetUncheckedCreateWithoutGuardianInput = {
    id?: string
    name: string
    bread: string
    species: string
    available_for_adoption?: boolean
    avatar_url: string
    adoption_record?: AdoptionUncheckedCreateNestedManyWithoutPetInput
  }

  export type PetCreateOrConnectWithoutGuardianInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutGuardianInput, PetUncheckedCreateWithoutGuardianInput>
  }

  export type AdoptionUpsertWithWhereUniqueWithoutAdopterInput = {
    where: AdoptionWhereUniqueInput
    update: XOR<AdoptionUpdateWithoutAdopterInput, AdoptionUncheckedUpdateWithoutAdopterInput>
    create: XOR<AdoptionCreateWithoutAdopterInput, AdoptionUncheckedCreateWithoutAdopterInput>
  }

  export type AdoptionUpdateWithWhereUniqueWithoutAdopterInput = {
    where: AdoptionWhereUniqueInput
    data: XOR<AdoptionUpdateWithoutAdopterInput, AdoptionUncheckedUpdateWithoutAdopterInput>
  }

  export type AdoptionUpdateManyWithWhereWithoutAdopterInput = {
    where: AdoptionScalarWhereInput
    data: XOR<AdoptionUpdateManyMutationInput, AdoptionUncheckedUpdateManyWithoutAdoption_recordInput>
  }

  export type AdoptionScalarWhereInput = {
    AND?: Enumerable<AdoptionScalarWhereInput>
    OR?: Enumerable<AdoptionScalarWhereInput>
    NOT?: Enumerable<AdoptionScalarWhereInput>
    id?: StringFilter | string
    adopter_id?: StringFilter | string
    pet_id?: StringFilter | string
  }

  export type PetUpsertWithWhereUniqueWithoutGuardianInput = {
    where: PetWhereUniqueInput
    update: XOR<PetUpdateWithoutGuardianInput, PetUncheckedUpdateWithoutGuardianInput>
    create: XOR<PetCreateWithoutGuardianInput, PetUncheckedCreateWithoutGuardianInput>
  }

  export type PetUpdateWithWhereUniqueWithoutGuardianInput = {
    where: PetWhereUniqueInput
    data: XOR<PetUpdateWithoutGuardianInput, PetUncheckedUpdateWithoutGuardianInput>
  }

  export type PetUpdateManyWithWhereWithoutGuardianInput = {
    where: PetScalarWhereInput
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyWithoutMy_petsInput>
  }

  export type PetScalarWhereInput = {
    AND?: Enumerable<PetScalarWhereInput>
    OR?: Enumerable<PetScalarWhereInput>
    NOT?: Enumerable<PetScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    bread?: StringFilter | string
    species?: StringFilter | string
    available_for_adoption?: BoolFilter | boolean
    avatar_url?: StringFilter | string
    guardian_id?: StringFilter | string
  }

  export type AdoptionCreateWithoutPetInput = {
    id?: string
    adopter: UserCreateNestedOneWithoutAdoption_recordInput
  }

  export type AdoptionUncheckedCreateWithoutPetInput = {
    id?: string
    adopter_id: string
  }

  export type AdoptionCreateOrConnectWithoutPetInput = {
    where: AdoptionWhereUniqueInput
    create: XOR<AdoptionCreateWithoutPetInput, AdoptionUncheckedCreateWithoutPetInput>
  }

  export type UserCreateWithoutMy_petsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar_url: string
    adoption_record?: AdoptionCreateNestedManyWithoutAdopterInput
  }

  export type UserUncheckedCreateWithoutMy_petsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar_url: string
    adoption_record?: AdoptionUncheckedCreateNestedManyWithoutAdopterInput
  }

  export type UserCreateOrConnectWithoutMy_petsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMy_petsInput, UserUncheckedCreateWithoutMy_petsInput>
  }

  export type AdoptionUpsertWithWhereUniqueWithoutPetInput = {
    where: AdoptionWhereUniqueInput
    update: XOR<AdoptionUpdateWithoutPetInput, AdoptionUncheckedUpdateWithoutPetInput>
    create: XOR<AdoptionCreateWithoutPetInput, AdoptionUncheckedCreateWithoutPetInput>
  }

  export type AdoptionUpdateWithWhereUniqueWithoutPetInput = {
    where: AdoptionWhereUniqueInput
    data: XOR<AdoptionUpdateWithoutPetInput, AdoptionUncheckedUpdateWithoutPetInput>
  }

  export type AdoptionUpdateManyWithWhereWithoutPetInput = {
    where: AdoptionScalarWhereInput
    data: XOR<AdoptionUpdateManyMutationInput, AdoptionUncheckedUpdateManyWithoutAdoption_recordInput>
  }

  export type UserUpsertWithoutMy_petsInput = {
    update: XOR<UserUpdateWithoutMy_petsInput, UserUncheckedUpdateWithoutMy_petsInput>
    create: XOR<UserCreateWithoutMy_petsInput, UserUncheckedCreateWithoutMy_petsInput>
  }

  export type UserUpdateWithoutMy_petsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUpdateManyWithoutAdopterNestedInput
  }

  export type UserUncheckedUpdateWithoutMy_petsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUncheckedUpdateManyWithoutAdopterNestedInput
  }

  export type UserCreateWithoutAdoption_recordInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar_url: string
    my_pets?: PetCreateNestedManyWithoutGuardianInput
  }

  export type UserUncheckedCreateWithoutAdoption_recordInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar_url: string
    my_pets?: PetUncheckedCreateNestedManyWithoutGuardianInput
  }

  export type UserCreateOrConnectWithoutAdoption_recordInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdoption_recordInput, UserUncheckedCreateWithoutAdoption_recordInput>
  }

  export type PetCreateWithoutAdoption_recordInput = {
    id?: string
    name: string
    bread: string
    species: string
    available_for_adoption?: boolean
    avatar_url: string
    guardian: UserCreateNestedOneWithoutMy_petsInput
  }

  export type PetUncheckedCreateWithoutAdoption_recordInput = {
    id?: string
    name: string
    bread: string
    species: string
    available_for_adoption?: boolean
    avatar_url: string
    guardian_id: string
  }

  export type PetCreateOrConnectWithoutAdoption_recordInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutAdoption_recordInput, PetUncheckedCreateWithoutAdoption_recordInput>
  }

  export type UserUpsertWithoutAdoption_recordInput = {
    update: XOR<UserUpdateWithoutAdoption_recordInput, UserUncheckedUpdateWithoutAdoption_recordInput>
    create: XOR<UserCreateWithoutAdoption_recordInput, UserUncheckedCreateWithoutAdoption_recordInput>
  }

  export type UserUpdateWithoutAdoption_recordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    my_pets?: PetUpdateManyWithoutGuardianNestedInput
  }

  export type UserUncheckedUpdateWithoutAdoption_recordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    my_pets?: PetUncheckedUpdateManyWithoutGuardianNestedInput
  }

  export type PetUpsertWithoutAdoption_recordInput = {
    update: XOR<PetUpdateWithoutAdoption_recordInput, PetUncheckedUpdateWithoutAdoption_recordInput>
    create: XOR<PetCreateWithoutAdoption_recordInput, PetUncheckedCreateWithoutAdoption_recordInput>
  }

  export type PetUpdateWithoutAdoption_recordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    guardian?: UserUpdateOneRequiredWithoutMy_petsNestedInput
  }

  export type PetUncheckedUpdateWithoutAdoption_recordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    guardian_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdoptionUpdateWithoutAdopterInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet?: PetUpdateOneRequiredWithoutAdoption_recordNestedInput
  }

  export type AdoptionUncheckedUpdateWithoutAdopterInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdoptionUncheckedUpdateManyWithoutAdoption_recordInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
  }

  export type PetUpdateWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUpdateManyWithoutPetNestedInput
  }

  export type PetUncheckedUpdateWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
    adoption_record?: AdoptionUncheckedUpdateManyWithoutPetNestedInput
  }

  export type PetUncheckedUpdateManyWithoutMy_petsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bread?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    available_for_adoption?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: StringFieldUpdateOperationsInput | string
  }

  export type AdoptionUpdateWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    adopter?: UserUpdateOneRequiredWithoutAdoption_recordNestedInput
  }

  export type AdoptionUncheckedUpdateWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    adopter_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}